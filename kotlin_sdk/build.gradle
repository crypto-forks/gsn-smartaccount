buildscript {
    ext.web3j_version = '4.3.2-SNAPSHOT'
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

plugins {
    id 'kotlin-multiplatform' version '1.3.31'
}
repositories {
    mavenCentral()
    maven {
        url "https://repo.spring.io/libs-release/"
    }
    jcenter()
    mavenLocal()
}
group 'com.tabookey'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: 'com.moowork.node'

kotlin {
    jvm()
    js().compilations.test {
        kotlinOptions {
            moduleKind = "umd"
        }
    }
    js().compilations.main {
        kotlinOptions {
            moduleKind = "commonjs"
            sourceMap = true
            sourceMapEmbedSources = "always"
        }
    }

    def coroutinesVersion = "1.3.0-M2"

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.31" //used in Log implementation
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion"
                implementation kotlin('stdlib-common')
                implementation("com.ionspin.kotlin:bignum:0.0.9")
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation project(':java_foundation')
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'org.mockito:mockito-core:2.28.2'
                implementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
                implementation("org.web3j:core:$web3j_version") {
                    exclude group: "com.github.jnr"
                    changing = true
                }
//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-html-js', version: '0.6.11'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.3.0-RC'
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
//        macosMain {
//        }
//        macosTest {
//        }
    }
}
compileKotlinJs {
    kotlinOptions {
        freeCompilerArgs += "-Xallow-kotlin-package"
    }
}

// Workaround the problem with Node downloading
repositories.whenObjectAdded {
    if (it instanceof IvyArtifactRepository) {
        metadataSources {
            artifact()
        }
    }
}

node {
    download = true
}

task populateNodeModules(type: Copy, dependsOn: compileKotlinJs) {
    from "./node_modules"
    from compileKotlinJs.destinationDir
    into "${buildDir}/node_modules"
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}
task packJsFoundation(type: NpmTask) {
    args = ['pack', '../js_foundation/']
}
task installJsFoundation(type: Exec) {
    commandLine 'npm', 'install', './js_foundation-1.0.0.tgz'
}
task node_version(type: NpmTask) {
    args = ['version']
}
// TODO: sanitize JS build scripts
task installKotlinNpm(type: NpmTask) {
    args = ['install', 'kotlinx-coroutines-core', 'kotlin', 'kotlin-test']
}

task runMocha(type: NodeTask, dependsOn:
        [compileTestKotlinJs,
         packJsFoundation,
         installJsFoundation,
         installKotlinNpm,
         installMocha,
         populateNodeModules]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlinJs.outputFile]
}
